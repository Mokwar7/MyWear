const TelegramBot = require('node-telegram-bot-api');
const token = '6521417444:AAH5-kkoRNg1N1eB7GwMlnKR3eHB5R6iN28';
const bot = new TelegramBot(token, { polling: true });

const helloMessageText = `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyWear</b> üè™\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:`;
const helloCartMessageText = `<b>–í–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∏–∑–Ω—É</b> ü§ó\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:`;
const menuMessageText = `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é MyWear</b> üè™\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:`;
let count = 0;
let cart = [];
const menuOptinos = {
    reply_markup: {
        inline_keyboard: [
            [{ text: '–ö–æ—Ä–∑–∏–Ω–∞ üõí', callback_data: 'sd' }],
            [{ text: '–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚ùî', callback_data: 'ds' }],
            [{ text: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ üì±', callback_data: 'sd' }],
            [{ text: '–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä üîé', callback_data: 'sd' }],
            [{ text: '–û—Ç–∑—ã–≤—ã ‚≠ê', callback_data: 'f' }],
        ],
    },
    parse_mode: 'HTML',
};
const cartOptions = {
    reply_markup: {
        inline_keyboard: [
            [{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üí∂', callback_data: 's' }],
            [{ text: '–ö–æ—Ä–∑–∏–Ω–∞ üõí', callback_data: 'a' }],
            [{ text: '–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚ùî', callback_data: 's' }],
            [{ text: '–ì–ª–∞–≤–Ω–∞—è üîô', callback_data: 'menu' }],
        ],
    },
    parse_mode: 'HTML',
};

function getUserCart(msg) {
    console.log(msg)
    fetch('http://localhost:3000/cart/tg', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            "Authorization": ''
        },
        body: JSON.stringify({
            'tg': 'sdsfd',
        })
    })
        .then((res) => {
            if (res.ok) {
                return res.json()
            }
            return Promise.reject(`–û—à–∏–±–∫–∞: ${res.status}`);
        })
        .then((res) => {
            cart = res.data
            if (cart.length != 0) {
                bot.sendMessage(msg.chat.id, helloCartMessageText, cartOptions);
            } else {
                bot.sendMessage(msg.chat.id, helloMessageText, menuOptinos);
            }
        })
        .catch((err) => {
            console.log(err)
        })
}

bot.onText(/\/start/, (msg) => {
    getUserCart(msg)
});

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    switch (data) {
        case 'btn1':
            count = 0
            bot.sendMessage(chatId, '‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•) ‚úèÔ∏è', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                    ],
                },
            });
            bot.once('message', (msg) => {
                const number = parseInt(msg.text);
                if (isNaN(number)) {
                    bot.sendMessage(chatId, '‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ï—â–µ —Ä–∞–∑ ‚Ü™Ô∏è', callback_data: 'btn1' }],
                                [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                            ],
                        },
                        parse_mode: 'HTML',
                    });
                } else {
                    const result = Math.floor(number * 13.2 * 1.08 + 500);
                    bot.sendMessage(chatId, `‚úÖ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ: ${result}‚ÇΩ* ‚úÖ\n\n_–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ —Å—Ç–æ–∏—Ç 300‚ÇΩ_`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑ ‚Ü™Ô∏è', callback_data: 'btn1' }],
                                [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                            ],
                        },
                        parse_mode: 'MarkdownV2',
                    });
                }
            });
            break;
        case 'btn2':
            count = 0
            bot.sendMessage(chatId, 'üîé –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. üîé', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                    ],
                },
            });
            bot.once('message', (msg) => {
                const number = msg.text;
                if (number.length != 10 || number.split('')[0] != 'M') {
                    bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ï—â–µ —Ä–∞–∑ ‚Ü™Ô∏è', callback_data: 'btn2' }],
                                [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                            ],
                        },
                        parse_mode: 'HTML',
                    });
                } else {
                    bot.sendMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:* —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ* ‚úÖ\n\n_–ü—Ä–∏–º–µ—Ä–Ω–æ 10 —è–Ω–≤–∞—Ä—è –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–µ–¥–µ—Ç –≤ –ú–æ—Å–∫–≤—É_`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–û—Ç—Å–ª–µ–¥–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑ ‚Ü™Ô∏è', callback_data: 'btn2' }],
                                [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                            ],
                        },
                        parse_mode: 'MarkdownV2',
                    });
                }
            });
            break;
        case 'btn3':
            count < textRevs.length
                ? bot.sendPhoto(chatId, imgRevs[count], {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ï—â–µ –æ—Ç–∑—ã–≤—ã ‚Ü™Ô∏è', callback_data: 'btn3' }],
                            [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                        ],
                    },
                    parse_mode: 'MarkdownV2',
                }) && bot.sendMessage(chatId, textRevs[count], { parse_mode: 'MarkdownV2' }) && count++
                : bot.sendMessage(chatId, `‚úÖ *–ë–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –≤ –Ω–∞—à–µ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ @mokwar* ‚úÖ`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back' }],
                        ],
                    },
                    parse_mode: 'MarkdownV2',
                });

            break;
        case 'menu':
            count = 0
            bot.sendMessage(chatId, menuMessageText, menuOptinos);
            break;
    }
});